{"version":3,"sources":["components/coordenates.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Coordenates","props","className","alt","src","iss","iss_position","latitude","longitude","App","state","fetch","then","response","json","coordenates","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uSAGaA,G,YAAc,SAACC,GAAD,OAIjB,kCACC,yBAAKC,UAAU,eACd,gCAAO,kBAAP,KACA,yBAAKA,UAAU,SAASC,IAAI,MAAMC,IAAG,kFACrC,gCAAM,eAAiBH,EAAMI,KAAO,IAAIC,cAAgB,IAAIC,UAC3D,gCAAM,gBAAkBN,EAAMI,KAAO,IAAIC,cAAgB,IAAIE,eCmB3DC,E,kDAxBb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXL,IAAK,IAJI,E,gEASQ,IAAD,OAClBM,MAAM,2CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAW,OAAI,EAAKC,SAAS,CAACX,IAAKU,S,+BAIzC,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAaG,IAAKY,KAAKP,MAAML,W,GAnBnBa,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9bd1b96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './coordenates.style.css';\r\n\r\nexport const Coordenates = (props) => (\r\n          // This format allowed me to access the nested object in the iss object.\r\n          // I was trying to access the possition like this: this.state.popsition.latitude/longitude\r\n          // I was getting an error: Cannot read property 'latitude/longitude' of undefined\r\n          <fragment>\r\n          \t<div className=\"coordenates\">\r\n          \t\t<h1> { \"ISS Coordenates\" } </h1>\r\n          \t\t<img className=\"center\" alt=\"iss\" src={`https://pbs.twimg.com/profile_images/1067887841122803712/zakQ4EB-_400x400.jpg`}/>\r\n\t          \t<h3> {\"Latitude: \" + ((props.iss || {}).iss_position || {}).latitude}</h3>\r\n\t           \t<h3> {\"Longitude: \" + ((props.iss || {}).iss_position || {}).longitude}</h3>\r\n\t        </div>\r\n          </fragment>\r\n\t)","import React, { Component } from 'react';\nimport './App.css';\nimport { Coordenates } from './components/coordenates.component';\n// const express = require('express');\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      iss: {},\n    }\n  }\n\n  //This is a lifecycle method\n  componentDidMount() {\n    fetch('http://api.open-notify.org/iss-now.json') // fectch returns a promise\n    .then(response => response.json()) // this returns a response that we need to return in a json format\n    .then(coordenates => this.setState({iss: coordenates}));  // this returns an array of objects with the coordenates data in the api\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Coordenates iss={this.state.iss} />\n      </div>\n    );\n  } \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}